// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductApi;

#nullable disable

namespace ProductApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductApi.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ProductApi.Models.Price", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("NetPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductSKU")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductSKU")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("ProductApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("EAN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LogisticUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductApi.Models.Staging.StgInventory", b =>
                {
                    b.Property<string>("manufacturer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer_ref_num")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shipping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shipping_cost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StgInventories");
                });

            modelBuilder.Entity("ProductApi.Models.Staging.StgPrices", b =>
                {
                    b.Property<string>("Column1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Column2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Column3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Column4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Column5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Column6")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StgPrices");
                });

            modelBuilder.Entity("ProductApi.Models.Staging.StgProduct", b =>
                {
                    b.Property<string>("EAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("available_in_parcel_locker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("can_be_returned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("default_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("is_vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("is_wire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logistic_height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logistic_length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logistic_weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logistic_width")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("package_size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("producer_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reference_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("shipping")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StgProducts");
                });

            modelBuilder.Entity("ProductApi.Models.Inventory", b =>
                {
                    b.HasOne("ProductApi.Models.Product", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("ProductApi.Models.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductApi.Models.Price", b =>
                {
                    b.HasOne("ProductApi.Models.Product", "Product")
                        .WithOne("Price")
                        .HasForeignKey("ProductApi.Models.Price", "ProductSKU")
                        .HasPrincipalKey("ProductApi.Models.Product", "SKU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductApi.Models.Product", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
